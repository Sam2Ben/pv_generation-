import os
import io
import base64
import streamlit as st
from PIL import Image
import tempfile
from pydub import AudioSegment
import subprocess
import time
import random
from google import generativeai as genai
from docx import Document
from docx.shared import Pt, RGBColor, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
import re
import requests
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
import json
from bs4 import BeautifulSoup
import av
from streamlit_webrtc import webrtc_streamer, WebRtcMode, AudioProcessorBase
from st_audiorec import st_audiorec
import tempfile
import os
from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
import datetime
import re
from datetime import datetime
from docx.oxml.ns import qn
import concurrent.futures


# Configuration des APIs
def configure_apis():
    # Configure Google Gemini
    google_api_key = st.secrets.get("GOOGLE_API_KEY")
    if google_api_key:
        genai.configure(api_key=google_api_key)
    else:
        st.error("‚ùå Cl√© API Google non trouv√©e!")
        st.stop()

def convert_to_mp3(input_path, output_path):
    """Convertit n'importe quel format audio en MP3"""
    try:
        import shutil
        if not shutil.which("ffmpeg"):
            st.error("ffmpeg non trouv√©. Veuillez installer ffmpeg.")
            return False
        audio = AudioSegment.from_file(input_path)
        audio.export(output_path, format="mp3")
        return True
    except Exception as e:
        st.error(f"Erreur de conversion audio : {e}")
        return False

def extract_file_id_from_url(url):
    """Extrait l'ID du fichier depuis une URL Google Drive"""
    patterns = [
        r"https://drive\.google\.com/file/d/([a-zA-Z0-9_-]+)",
        r"https://drive\.google\.com/open\?id=([a-zA-Z0-9_-]+)",
        r"https://drive\.google\.com/uc\?id=([a-zA-Z0-9_-]+)",
        r"id=([a-zA-Z0-9_-]+)"
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    return None

def verify_video_file(file_path):
    """V√©rifie si le fichier vid√©o est valide"""
    try:
        if not os.path.exists(file_path):
            st.error(f"‚ùå Le fichier {file_path} n'existe pas")
            return False
            
        file_size = os.path.getsize(file_path)
        if file_size < 10000:  # Moins de 10KB est suspect
            st.error("‚ùå Le fichier est trop petit pour √™tre une vid√©o valide")
            return False
            
        st.info(f"üìä Taille du fichier : {file_size/1024/1024:.1f} MB")
        
        # V√©rification du format avec ffprobe
        probe_command = [
            "ffprobe",
            "-v", "error",
            "-show_format",
            "-show_streams",
            file_path
        ]
        
        result = subprocess.run(probe_command, capture_output=True, text=True)
        
        if result.returncode != 0:
            st.error(f"‚ùå Format vid√©o non valide: {result.stderr}")
            return False
            
        st.success("‚úÖ Format vid√©o valid√©")
        return True
            
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la v√©rification: {str(e)}")
        return False

def convert_vro_to_mp4(input_path, output_path):
    """Convertit un fichier VRO en MP4"""
    try:
        st.info("üîÑ Conversion du fichier VRO en MP4...")
        
        # Commande de conversion optimis√©e pour les fichiers VRO
        convert_command = [
            "ffmpeg",
            "-y",  # √âcraser le fichier de sortie si existant
            "-fflags", "+genpts",  # G√©n√©rer les timestamps
            "-i", input_path,
            "-c:v", "libx264",  # Codec vid√©o
            "-preset", "ultrafast",  # Conversion rapide
            "-crf", "23",  # Qualit√© raisonnable
            "-c:a", "aac",  # Codec audio
            "-strict", "experimental",
            "-b:a", "192k",  # Bitrate audio
            "-movflags", "+faststart",  # Optimisation pour la lecture web
            output_path
        ]
        
        # Ex√©cuter la conversion
        result = subprocess.run(convert_command, capture_output=True, text=True)
        
        if result.returncode != 0:
            st.error(f"‚ùå Erreur lors de la conversion VRO: {result.stderr}")
            return False
            
        if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
            st.success("‚úÖ Conversion VRO ‚Üí MP4 r√©ussie")
            return True
        else:
            st.error("‚ùå Fichier MP4 non cr√©√© ou vide")
            return False
            
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la conversion: {str(e)}")
        return False

def extract_audio_from_video(input_video_path, output_audio_path):
    """Extrait l'audio d'une vid√©o"""
    try:
        # V√©rifier si le fichier existe
        if not os.path.exists(input_video_path):
            st.error("‚ùå Le fichier vid√©o n'existe pas")
            return False
            
        # V√©rifier si le fichier est vide
        if os.path.getsize(input_video_path) == 0:
            st.error("‚ùå Le fichier vid√©o est vide")
            return False
            
        # Si c'est un fichier VRO, on le convertit d'abord en MP4
        if input_video_path.lower().endswith('.vro'):
            st.info("üîÑ Conversion du fichier VRO en MP4...")
            temp_mp4 = input_video_path + '.mp4'
            try:
                # Commande de conversion VRO vers MP4
                convert_command = [
                    'ffmpeg',
                    '-i', input_video_path,
                    '-c:v', 'libx264',
                    '-preset', 'ultrafast',
                    '-c:a', 'aac',
                    '-strict', 'experimental',
                    '-write_xing', '0',
                    '-y',
                    temp_mp4
                ]
                
                result = subprocess.run(convert_command, capture_output=True, text=True)
                if result.returncode != 0:
                    st.error(f"‚ùå Erreur lors de la conversion VRO vers MP4: {result.stderr}")
                    return False
                    
                input_video_path = temp_mp4
                st.success("‚úÖ Conversion VRO vers MP4 r√©ussie")
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la conversion VRO vers MP4: {str(e)}")
                return False
                
        # Extraction de l'audio
        st.info("üéµ Extraction de l'audio...")
        try:
            # Commande d'extraction audio
            extract_command = [
                'ffmpeg',
                '-i', input_video_path,
                '-vn',
                '-acodec', 'libmp3lame',
                '-ar', '44100',
                '-ab', '192k',
                '-y',
                output_audio_path
            ]
            
            result = subprocess.run(extract_command, capture_output=True, text=True)
            if result.returncode != 0:
                st.error(f"‚ùå Erreur lors de l'extraction audio: {result.stderr}")
                return False
                
            # V√©rifier si le fichier audio a √©t√© cr√©√© et n'est pas vide
            if not os.path.exists(output_audio_path) or os.path.getsize(output_audio_path) == 0:
                st.error("‚ùå Le fichier audio n'a pas √©t√© cr√©√© ou est vide")
                return False
                
            st.success("‚úÖ Extraction audio r√©ussie")
            return True
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'extraction audio: {str(e)}")
            return False
            
    except Exception as e:
        st.error(f"‚ùå Erreur inattendue lors du traitement: {str(e)}")
        return False
    finally:
        # Nettoyage des fichiers temporaires
        try:
            temp_mp4 = input_video_path + '.mp4'
            if os.path.exists(temp_mp4):
                os.remove(temp_mp4)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erreur lors du nettoyage des fichiers temporaires: {str(e)}")

def segment_audio(audio_path, segment_length_ms=120000):
    """Divise un gros fichier audio en segments sans tout charger en RAM (version ultra-optimis√©e)"""
    try:
        import math
        import subprocess
        
        # Utiliser ffprobe pour obtenir la dur√©e
        result = subprocess.run([
            'ffprobe', '-v', 'error', '-show_entries',
            'format=duration', '-of',
            'default=noprint_wrappers=1:nokey=1', audio_path
        ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        
        total_duration = float(result.stdout)
        segment_length_sec = segment_length_ms / 1000
        
        num_segments = math.ceil(total_duration / segment_length_sec)
        segment_paths = []  # Stocker uniquement les chemins

        temp_dir = tempfile.gettempdir()

        for i in range(num_segments):
            start_time = i * segment_length_sec
            temp_segment_path = os.path.join(temp_dir, f"segment_{i+1}.mp3")
            
            extract_cmd = [
                "ffmpeg",
                "-y",
                "-i", audio_path,
                "-ss", str(start_time),
                "-t", str(segment_length_sec),
                "-c", "copy",
                temp_segment_path
            ]
            subprocess.run(extract_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
            
            if os.path.exists(temp_segment_path):
                segment_paths.append(temp_segment_path)

        return segment_paths
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la segmentation audio (stream) : {str(e)}")
        return []

        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la segmentation audio (stream) : {str(e)}")
        return []


def process_segment_batch(segments, start_idx, batch_size, total_segments, progress_bar, status_text):
    """Traite un lot de segments audio (optimis√© sans chargement m√©moire) avec timeout par segment et feedback UX am√©lior√©."""
    batch_transcript = []
    SEGMENT_TIMEOUT = 30  # secondes
    start_time = time.time()
    for i in range(start_idx, min(start_idx + batch_size, total_segments)):
        segment_path = segments[i]  # Maintenant segments contient des chemins de fichier
        segment_number = i + 1
        try:
            status_text.text(f"üéØ Traitement du segment {segment_number}/{total_segments}")
            with open(segment_path, "rb") as f:
                audio_bytes = f.read()
            model = genai.GenerativeModel('gemini-2.0-flash')
            def call_gemini():
                return model.generate_content([
                    "Transcrivez ce segment audio mot pour mot en fran√ßais.",
                    {"mime_type": "audio/mp3", "data": audio_bytes}
                ])
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(call_gemini)
                try:
                    response = future.result(timeout=SEGMENT_TIMEOUT)
                    if response.text:
                        batch_transcript.append(response.text)
                        progress_bar.progress((i + 1)/total_segments)
                    else:
                        batch_transcript.append(f"[Segment {segment_number} non transcrit]")
                except concurrent.futures.TimeoutError:
                    st.warning(f"‚è∞ Timeout sur le segment {segment_number} (>{SEGMENT_TIMEOUT}s)")
                    batch_transcript.append(f"[Segment {segment_number} timeout]")
            os.remove(segment_path)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erreur sur le segment {segment_number}: {str(e)}")
            batch_transcript.append(f"[Segment {segment_number} non transcrit]")
        elapsed = time.time() - start_time
        if elapsed > 120:
            st.warning("‚è≥ Le traitement audio prend plus de 2 minutes. Merci de patienter ou essayez avec un fichier plus court.")
        time.sleep(random.uniform(1, 2))  # Attente pour respecter quotas API
    status_text.text("Traitement du lot termin√©.")
    return batch_transcript


def transcribe_video(video_file):
    """Transcrit une vid√©o en texte sans charger tout en RAM."""
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            # Cr√©er un chemin temporaire avec bonne extension
            if hasattr(video_file, 'name'):
                ext = os.path.splitext(video_file.name)[1].lower()
                video_temp_path = os.path.join(temp_dir, f"uploaded_video{ext}")
                st.info(f"üìù Sauvegarde du fichier temporaire: {video_file.name}")
            else:
                ext = '.mp4'
                video_temp_path = os.path.join(temp_dir, "uploaded_video.mp4")
                st.info("üìù Sauvegarde d'un fichier vid√©o sans nom")

            # Maintenant, on enregistre directement l'objet t√©l√©charg√©
            with open(video_temp_path, 'wb') as out_file:
                for chunk in iter(lambda: video_file.read(1024 * 1024), b''):
                    out_file.write(chunk)

            st.success("‚úÖ Vid√©o sauvegard√©e sur disque temporaire")

            # On v√©rifie la taille
            video_size = os.path.getsize(video_temp_path)
            st.info(f"üìä Taille du fichier vid√©o: {video_size/1024/1024:.2f} MB")

            # V√©rifier la validit√©
            if not verify_video_file(video_temp_path):
                return ""

            # On extrait maintenant l'audio
            audio_path = os.path.join(temp_dir, "output_audio.mp3")
            st.info("üéµ Extraction de l'audio...")
            if not extract_audio_from_video(video_temp_path, audio_path):
                return ""

            # Segmentation
            st.info("üîÑ Segmentation de l'audio...")
            segments = segment_audio(audio_path)
            if not segments:
                st.error("‚ùå √âchec de la segmentation audio")
                return ""

            st.success(f"‚úÖ Audio segment√© en {len(segments)} parties")
            
            # Traitement par batch
            progress_bar = st.progress(0)
            status_text = st.empty()

            full_transcript = []
            BATCH_SIZE = 10

            for batch_start in range(0, len(segments), BATCH_SIZE):
                batch_results = process_segment_batch(
                    segments, batch_start, BATCH_SIZE, len(segments),
                    progress_bar, status_text
                )
                full_transcript.extend(batch_results)

            if not full_transcript:
                st.warning("‚ö†Ô∏è Aucun texte n'a √©t√© transcrit")
                return ""
                
            st.success("‚úÖ Transcription termin√©e avec succ√®s")
            return "\n".join(full_transcript)

        except Exception as e:
            st.error(f"‚ùå Erreur lors de la transcription: {str(e)}")
            return ""


def process_handwritten_image(image_bytes):
    """Extrait le texte d'une image manuscrite avec m√©canisme de retry"""
    @retry_with_backoff
    def transcribe_image():
        try:
            image_base64 = base64.b64encode(image_bytes).decode('utf-8')
            
            model = genai.GenerativeModel('gemini-2.0-flash')
            
            prompt = """Transcris pr√©cis√©ment le texte manuscrit dans cette image.
            INSTRUCTIONS :
            1. Retourne uniquement le texte, sans commentaires
            2. Pr√©serve la mise en forme (retours √† la ligne, espacements)
            3. Conserve la ponctuation exacte
            4. Maintiens les nombres et symboles tels quels
            5. Respecte les majuscules et minuscules"""
            
            response = model.generate_content([
                prompt,
                {"mime_type": "image/jpeg", "data": image_base64}
            ])
            
            if response.text:
                return response.text.strip()
            else:
                raise Exception("Aucun texte d√©tect√© dans l'image.")
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Tentative de transcription √©chou√©e : {str(e)}")
            raise e

    try:
        # Premier essai
        result = transcribe_image()
        if result:
            return result
            
        # Si le r√©sultat est vide, on attend et on r√©essaie
        time.sleep(2)  # Attente de 2 secondes
        st.info("üîÑ Nouvelle tentative de transcription...")
        
        # Deuxi√®me essai avec un prompt plus d√©taill√©
        prompt_retry = """Analyse et transcris TOUT le texte manuscrit visible dans cette image.
        IMPORTANT :
        - Examine l'image en d√©tail, pixel par pixel
        - Transcris absolument tout le texte visible
        - N'oublie aucun d√©tail, m√™me les petites annotations
        - Conserve la structure exacte du texte
        - Inclus les num√©ros, symboles et caract√®res sp√©ciaux"""
        
        model = genai.GenerativeModel('gemini-2.0-flash')
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')
        
        response = model.generate_content([
            prompt_retry,
            {"mime_type": "image/jpeg", "data": image_base64}
        ])
        
        if response.text:
            return response.text.strip()
        else:
            st.warning("‚ö†Ô∏è Aucun texte n'a √©t√© d√©tect√© dans l'image apr√®s plusieurs tentatives.")
            return ""
            
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la reconnaissance du texte : {str(e)}")
        return ""

def retry_with_backoff(func, max_retries=5, initial_delay=1):
    """Fonction utilitaire pour r√©essayer une op√©ration avec un d√©lai exponentiel"""
    def wrapper(*args, **kwargs):
        delay = initial_delay
        last_exception = None
        
        for attempt in range(max_retries):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                last_exception = e
                error_code = str(e)
                # R√©essayer sur les erreurs de quota (429) ou d'annulation client (499)
                if "429" in error_code or "499" in error_code: 
                    st.warning(f"‚ö†Ô∏è Erreur API ({error_code}), nouvelle tentative {attempt + 1}/{max_retries} dans {delay} secondes...")
                    time.sleep(delay)
                    delay *= 2  # Backoff exponentiel
                else:
                    # Pour les autres exceptions, ne pas r√©essayer
                    raise e
        
        st.error(f"‚ùå √âchec apr√®s {max_retries} tentatives : {str(last_exception)}")
        # Retourner None ou une valeur indiquant l'√©chec si toutes les tentatives √©chouent
        return None
    
    return wrapper

def process_pdf(pdf_file):
    """Extrait le contenu d√©taill√© et les acronymes d'un PDF en un seul appel."""
    try:
        pdf_bytes = pdf_file.read()
        pdf_base64 = base64.b64encode(pdf_bytes).decode('utf-8')
        
        model = genai.GenerativeModel('gemini-2.0-flash')
        
        prompt = """Analyse ce document PDF de mani√®re EXHAUSTIVE et D√âTAILL√âE.
        
        INSTRUCTIONS SP√âCIFIQUES :
        
        1. EXTRACTION COMPL√àTE DU CONTENU :
           - Extraire TOUS les textes, exactement comme ils apparaissent.
           - Conserver TOUS les chiffres, statistiques, donn√©es num√©riques avec leurs unit√©s.
           - Maintenir TOUS les tableaux avec leurs donn√©es compl√®tes.
           - D√©crire TOUS les graphiques avec leurs valeurs pr√©cises.
           - Capturer TOUTES les notes de bas de page et r√©f√©rences.
           - Respecter la structure (sections, titres, listes).
           - NE PAS r√©sumer ou synth√©tiser le corps du texte.
           
        2. EXTRACTION DES ACRONYMES :
           - Identifier TOUS les acronymes pr√©sents dans le document.
           - Si l'acronyme est d√©fini explicitement dans le texte, utiliser cette d√©finition EXACTE.
           - Si l'acronyme n'est PAS d√©fini dans le texte, rechercher sa d√©finition officielle connue dans des sources fiables.
           - Lister les acronymes et leurs d√©finitions S√âPAR√âMENT √† la fin.
        
        3. FORMAT DE SORTIE ATTENDU :
           - D'abord, le contenu complet et d√©taill√© du document, en respectant sa structure.
           - Ensuite, une ligne de s√©paration claire comme : '--- ACRONYMES ---'.
           - Enfin, la liste des acronymes, un par ligne, au format : 'ACRONYME: D√©finition compl√®te'.
           
        IMPORTANT : Assure-toi de bien s√©parer le contenu principal de la liste des acronymes avec '--- ACRONYMES ---'."""
        
        @retry_with_backoff
        def analyze_pdf_and_extract_acronyms():
            response = model.generate_content([
                {
                    "role": "user",
                    "parts": [
                        prompt,
                        {"mime_type": "application/pdf", "data": pdf_base64}
                    ]
                }
            ])
            return response.text if response.text else ""
        
        full_result = analyze_pdf_and_extract_acronyms()
        
        if not full_result:
            st.warning(f"‚ö†Ô∏è Aucun contenu extrait du PDF: {pdf_file.name}")
            return {"summary": "", "acronyms": {}}
            
        # S√©parer le contenu et les acronymes
        separator = "--- ACRONYMES ---"
        if separator in full_result:
            summary_part, acronym_part = full_result.split(separator, 1)
            summary = summary_part.strip()
            
            # Parser les acronymes
            acronyms = {}
            lines = acronym_part.strip().split('\n')
            for line in lines:
                if ':' in line:
                    acronym, definition = line.split(':', 1)
                    acronym = acronym.strip().upper()
                    definition = definition.strip()
                    if acronym and definition:
                        acronyms[acronym] = definition
            return {"summary": summary, "acronyms": acronyms}
        else:
            # Si le s√©parateur n'est pas trouv√©, retourner tout comme r√©sum√© et pas d'acronymes
            st.warning(f"‚ö†Ô∏è S√©parateur d'acronymes non trouv√© dans l'analyse de {pdf_file.name}")
            return {"summary": full_result.strip(), "acronyms": {}}
            
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'analyse du PDF {pdf_file.name}: {str(e)}")
        return {"summary": f"[Erreur lors de l'analyse du PDF: {str(e)}]", "acronyms": {}}


def create_word_pv(pv_text, meeting_info):
    doc = Document()

    # === En-t√™te centr√© ===
    section = doc.sections[0]
    header = section.header
    header_para = header.paragraphs[0]
    header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    header_text = (
        'TANGER MED PORT AUTHORITY S.A "TMPA"\n'
        'SOCI√âT√â ANONYME √Ä CONSEIL D\'ADMINISTRATION\n'
        'AU CAPITAL DE 1.704.000.000 DIRHAMS CONVERTIBLES\n'
        'SI√àGE SOCIAL : ZONE FRANCHE DE KSAR EL MAJAZ, OUED RMEL,\n'
        'COMMUNE ANJRA ROUTE DE FNIDEQ ‚Äì TANGER\n'
        'RC N¬∞45349 TANGER ‚Äì ICE : 000053443000022'
    )
    header_para.text = header_text
    for run in header_para.runs:
        run.font.size = Pt(9)
        run.bold = True
        run.font.name = 'Times New Roman'

    doc.add_paragraph()

    # === Titre centr√© ===
    title = doc.add_paragraph()
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = title.add_run("PROC√àS VERBAL DE LA R√âUNION DU CONSEIL D'ADMINISTRATION\n")
    run.bold = True
    run.font.size = Pt(13)
    run.font.name = 'Times New Roman'

    # Date centr√©e
    try:
        date_str = meeting_info.get("date", "")
        date_obj = datetime.strptime(date_str, "%d/%m/%Y")
        formatted_date = date_obj.strftime("DU %d %B %Y").upper()
    except:
        formatted_date = f"DU {date_str}"
    date_p = doc.add_paragraph(formatted_date)
    date_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    date_p.runs[0].bold = True
    date_p.runs[0].font.size = Pt(12)

    doc.add_paragraph()

    # === Introduction formelle ===
    intro = doc.add_paragraph()
    intro.alignment = WD_ALIGN_PARAGRAPH.LEFT
    try:
        year = date_obj.year % 100
        date_lettres = date_obj.strftime('%d %B').capitalize()
        heure = meeting_info.get('heure_debut', '')
        lieu = meeting_info.get('lieu', '')
    except:
        year = 'XX'
        date_lettres = '[jour mois √©crit en lettres]'
        heure = '[Heure]'
        lieu = '[Lieu]'
    intro_text = f"L'An Deux Mille {year}, Le {date_lettres}, √Ä {heure} heures."
    intro.add_run(intro_text)
    doc.add_paragraph()
    doc.add_paragraph(f"Les membres du Conseil d'Administration de Tanger Med Port Authority S.A, par abr√©viation, ¬´ TMPA ¬ª se sont r√©unis en Conseil d'Administration en pr√©sentiel {('au ' + lieu) if lieu else ''} sur convocation et sous la pr√©sidence de.")
    doc.add_paragraph()

    # === Participants ===
    # Extraire les participants du texte g√©n√©r√©
    participants_section = ""
    if "PARTICIPANTS" in pv_text:
        start_idx = pv_text.find("PARTICIPANTS")
        end_idx = pv_text.find("ORDRE DU JOUR")
        if end_idx == -1:
            end_idx = len(pv_text)
        participants_section = pv_text[start_idx:end_idx].strip()

    # Ajouter les participants pr√©sents
    if "Pr√©sents" in participants_section:
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.LEFT
        run = p.add_run("SONT PR√âSENTS OU REPR√âSENT√âS :")
        run.bold = True
        run.font.size = Pt(12)
        run.font.name = 'Times New Roman'
        
        # Extraire les pr√©sents
        start_idx = participants_section.find("Pr√©sents")
        end_idx = participants_section.find("Absents")
        if end_idx == -1:
            end_idx = len(participants_section)
        presents_text = participants_section[start_idx:end_idx].strip()
        
        # Ajouter chaque participant
        for line in presents_text.split('\n'):
            if line.strip() and not line.startswith("Pr√©sents"):
                para = doc.add_paragraph(line.strip(), style='List Bullet')
                para.paragraph_format.left_indent = Pt(24)

    # Ajouter les absents
    if "Absents" in participants_section:
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.LEFT
        run = p.add_run("EST ABSENT EXCUS√â")
        run.bold = True
        run.font.size = Pt(12)
        run.font.name = 'Times New Roman'
        
        # Extraire les absents
        start_idx = participants_section.find("Absents")
        end_idx = participants_section.find("Invit√©s")
        if end_idx == -1:
            end_idx = len(participants_section)
        absents_text = participants_section[start_idx:end_idx].strip()
        
        # Ajouter chaque absent
        for line in absents_text.split('\n'):
            if line.strip() and not line.startswith("Absents"):
                para = doc.add_paragraph(line.strip(), style='List Bullet')
                para.paragraph_format.left_indent = Pt(24)

    # Ajouter les invit√©s
    if "Invit√©s" in participants_section:
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.LEFT
        run = p.add_run("ASSISTENT √âGALEMENT √Ä LA R√âUNION :")
        run.bold = True
        run.font.size = Pt(12)
        run.font.name = 'Times New Roman'
        
        # Extraire les invit√©s
        start_idx = participants_section.find("Invit√©s")
        invites_text = participants_section[start_idx:].strip()
        
        # Ajouter chaque invit√©
        for line in invites_text.split('\n'):
            if line.strip() and not line.startswith("Invit√©s"):
                para = doc.add_paragraph(line.strip(), style='List Bullet')
                para.paragraph_format.left_indent = Pt(24)

    doc.add_paragraph()
    doc.add_paragraph("Une feuille de pr√©sence a √©t√© √©tablie et sign√©e conform√©ment √† la loi par les membres du Conseil d'Administration participant √† la r√©union, chacun tant en son nom personnel que comme mandataire d√ªment habilit√© selon un pouvoir sp√©cial.")
    doc.add_paragraph()

    # === Ordre du jour ===
    doc.add_paragraph("ORDRE DU JOUR :", style='Normal').runs[0].bold = True
    
    # Extraire l'ordre du jour du texte g√©n√©r√©
    if "ORDRE DU JOUR" in pv_text:
        start_idx = pv_text.find("ORDRE DU JOUR")
        end_idx = pv_text.find("D√âROUL√â DE LA R√âUNION")
        if end_idx == -1:
            end_idx = len(pv_text)
        ordre_du_jour_text = pv_text[start_idx:end_idx].strip()
        
        # Ajouter chaque point de l'ordre du jour
        for line in ordre_du_jour_text.split('\n'):
            if line.strip() and not line.startswith("ORDRE DU JOUR"):
                if line.strip().startswith(('1.', '2.', '3.', '4.', '5.')):
                    para = doc.add_paragraph(line.strip(), style='List Number')
                    para.paragraph_format.left_indent = Pt(24)

    doc.add_paragraph()

    # === D√©roul√© de la r√©union ===
    if "D√âROUL√â DE LA R√âUNION" in pv_text:
        start_idx = pv_text.find("D√âROUL√â DE LA R√âUNION")
        end_idx = pv_text.find("CONCLUSION")
        if end_idx == -1:
            end_idx = len(pv_text)
        deroule_text = pv_text[start_idx:end_idx].strip()
        
        # Traiter chaque point
        current_point = None
        for line in deroule_text.split('\n'):
            line = line.strip()
            if not line or line.startswith("D√âROUL√â DE LA R√âUNION"):
                continue
                
            if line.startswith("Point"):
                if current_point:
                    doc.add_paragraph()
                current_point = doc.add_paragraph()
                run = current_point.add_run(line.split(":", 1)[1].strip().upper())
                run.bold = True
                run.underline = True
                run.font.color.rgb = RGBColor(0, 32, 96)
            elif line.startswith(("D√©cisions", "Discussions", "R√©solutions")):
                para = doc.add_paragraph()
                run = para.add_run(line.split(":", 1)[0] + " :")
                run.bold = True
                content = line.split(":", 1)[1].strip()
                if content:
                    para.add_run(" " + content)
            else:
                if current_point:
                    doc.add_paragraph(line)

    # === Conclusion ===
    if "CONCLUSION" in pv_text:
        start_idx = pv_text.find("CONCLUSION")
        conclusion_text = pv_text[start_idx:].strip()
        
        doc.add_paragraph()
        p = doc.add_paragraph()
        run = p.add_run("CONCLUSION")
        run.bold = True
        run.font.size = Pt(12)
        
        for line in conclusion_text.split('\n'):
            if line.strip() and not line.startswith("CONCLUSION"):
                doc.add_paragraph(line.strip())

    # === Pied de page ===
    section = doc.sections[0]
    footer = section.footer
    footer_para = footer.paragraphs[0]
    footer_para.text = f"PV_CA_TMPA_{meeting_info.get('date', '').replace('/', '_')}"
    footer_para.alignment = WD_ALIGN_PARAGRAPH.LEFT

    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer


def generate_meeting_minutes(video_transcript, handwritten_text, pdf_summary, meeting_info, audio_transcript=None):
    """G√©n√®re un PV de r√©union structur√© avec un niveau de d√©tail √©lev√© et des donn√©es pr√©cises"""
    try:
        # Formater les sources d'information de mani√®re plus structur√©e
        combined_text = ""
        
        # 1. Ajouter la transcription vid√©o si disponible
        if video_transcript and video_transcript.strip():
            combined_text += "[TRANSCRIPTION VID√âO]\n"
            combined_text += video_transcript.strip() + "\n\n"
        
        # 2. Ajouter les notes manuscrites si disponibles
        if handwritten_text and handwritten_text.strip():
            combined_text += "[NOTES MANUSCRITES]\n"
            combined_text += handwritten_text.strip() + "\n\n"
        
        # 3. Ajouter le contenu des documents PDF si disponible
        if pdf_summary and pdf_summary.strip():
            combined_text += "[DOCUMENTS PDF]\n"
            combined_text += pdf_summary.strip() + "\n\n"

        # 4. Ajouter la transcription audio si disponible   
        if audio_transcript and audio_transcript.strip():
            combined_text += "[ENREGISTREMENT AUDIO]\n"
            combined_text += audio_transcript.strip() + "\n\n"  

        if not combined_text.strip():
            return "Aucun contenu disponible pour g√©n√©rer le PV."

        model = genai.GenerativeModel('gemini-2.0-flash')
        
        prompt = f"""Analyse les sources d'information suivantes et g√©n√®re un proc√®s-verbal structur√© au format suivant :

1. PARTICIPANTS :
   - Pr√©sents : [Liste des participants pr√©sents]
   - Absents excus√©s : [Liste des absents excus√©s]
   - Invit√©s : [Liste des invit√©s]

2. ORDRE DU JOUR :
   [Liste num√©rot√©e des points √† l'ordre du jour]

3. D√âROUL√â DE LA R√âUNION :
   Pour chaque point de l'ordre du jour :
   - Titre du point
   - D√©cisions prises
   - Discussions importantes
   - R√©solutions adopt√©es

4. CONCLUSION :
   - R√©sum√© des d√©cisions principales
   - Prochaines √©tapes
   - Date de la prochaine r√©union si mentionn√©e

Sources d'information :
{combined_text}

Instructions :
1. Utilise UNIQUEMENT les informations pr√©sentes dans les sources
2. Respecte la structure demand√©e
3. Sois pr√©cis et professionnel
4. Inclus toutes les d√©cisions et discussions importantes
5. Mentionne les votes et r√©solutions si pr√©sents dans les sources"""

        @retry_with_backoff
        def generate_content():
            response = model.generate_content([
                {
                    "role": "user",
                    "parts": [prompt]
                }
            ])
            return response.text if response.text else ""

        result = generate_content()
        
        if result:
            # Nettoyage et formatage du texte g√©n√©r√©
            result = result.replace('**', '')
            result = result.replace('*', '')
            
            # Formater les titres de section
            for i in range(1, 10):
                result = result.replace(f'{i}.\n', f'{i}. ')
                result = result.replace(f'\n{i}. \n', f'\n{i}. ')
                result = result.replace(f'\n{i}.\n', f'\n{i}. ')
                result = result.replace(f'\n{i}.', f'\n\n{i}.')
            
            # Formater l'ordre du jour
            if "ORDRE DU JOUR" in result:
                ordre_index = result.index("ORDRE DU JOUR")
                result = result[:ordre_index] + "\n\nORDRE DU JOUR :\n" + result[ordre_index + 13:]
            
            # Formater les listes √† puces
            result = result.replace('‚Ä¢ ', '\n‚Ä¢ ')
            
            # Assurer des sauts de ligne appropri√©s
            result = result.replace('\n\n\n', '\n\n')
            
            # V√©rification finale pour les num√©ros isol√©s
            result = re.sub(r'\n(\d+\.)\s*\n', r'\n\1 ', result)
            
            return result.strip()
        else:
            st.warning("‚ö†Ô∏è Aucun contenu n'a √©t√© g√©n√©r√© pour le PV.")
            return ""
                
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration du PV : {str(e)}")
        return ""

def download_video_from_drive(video_url, output_path):
    """T√©l√©charge une vid√©o depuis Google Drive avec gestion des gros fichiers"""
    try:
        status_box = st.empty()
        progress_bar = st.empty()
        status_box.info("üîÑ Initialisation du t√©l√©chargement...")
        
        # Extraire l'ID du fichier
        file_id = extract_file_id_from_url(video_url)
        if not file_id:
            st.error("‚ùå Format d'URL Google Drive non reconnu")
            return False

        status_box.info(f"üìù ID du fichier extrait : {file_id}")

        # Configuration de la session avec des headers complets
        session = requests.Session()
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }

        # Utiliser l'URL de t√©l√©chargement direct avec usercontent
        download_url = f'https://drive.usercontent.google.com/download?id={file_id}&export=download&authuser=0&confirm=t'
        status_box.info(f"üîç T√©l√©chargement en cours...")
        
        response = session.get(download_url, headers=headers, stream=True, timeout=30)
        content_type = response.headers.get('Content-Type', '').lower()
        if 'text/html' in content_type:
            status_box.warning("‚ö†Ô∏è Redirection vers la page de confirmation d√©tect√©e. Tentative alternative...")
            # Essayer l'URL alternative pour les gros fichiers
            download_url = f'https://drive.usercontent.google.com/download?id={file_id}&export=download&authuser=0&confirm=t&uuid=123&at=123'
            response = session.get(download_url, headers=headers, stream=True, timeout=30)
            content_type = response.headers.get('Content-Type', '').lower()
            if 'text/html' in content_type:
                st.error("‚ùå Impossible d'acc√©der au fichier. Assurez-vous que :\n1. Le fichier est partag√© avec 'Tout le monde avec le lien'\n2. Vous avez les droits 'Lecteur' sur le fichier\n3. Le fichier n'est pas dans la corbeille")
                return False

        # Utiliser un nom de fichier temporaire unique
        import tempfile
        temp_dir = tempfile.gettempdir()
        temp_path = os.path.join(temp_dir, f"download_{file_id}_{int(time.time())}.tmp")
        
        try:
            chunk_size = 500 * 1024 * 1024  # 500MB chunks
            downloaded_size = 0
            expected_size = None
            if 'content-length' in response.headers:
                expected_size = int(response.headers['content-length'])
                status_box.info(f"üì¶ Taille totale du fichier : {expected_size/1024/1024:.1f} MB")
            else:
                status_box.info("üì¶ Taille totale du fichier inconnue")

            with open(temp_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=chunk_size):
                    if chunk:
                        f.write(chunk)
                        downloaded_size += len(chunk)
                        # Afficher la progression
                        if expected_size:
                            current_percent = (downloaded_size/expected_size)
                            status_box.info(f"üì• T√©l√©charg√© : {downloaded_size/1024/1024:.1f} MB / {expected_size/1024/1024:.1f} MB ({current_percent*100:.1f}%)")
                            progress_bar.progress(min(1.0, current_percent))
                        else:
                            status_box.info(f"üì• T√©l√©charg√© : {downloaded_size/1024/1024:.1f} MB")

            # V√©rifier le fichier t√©l√©charg√©
            if os.path.exists(temp_path):
                file_size = os.path.getsize(temp_path)
                if file_size < 10000:  # Moins de 10KB
                    st.error("‚ùå Fichier t√©l√©charg√© invalide ou trop petit")
                    try:
                        os.remove(temp_path)
                    except:
                        pass
                    return False
                # V√©rifier les premiers octets pour s'assurer que c'est un fichier VRO
                with open(temp_path, 'rb') as f:
                    header = f.read(8)
                    if not header.startswith(b'DVD') and not header.startswith(b'\x00\x00\x01\xBA'):
                        st.error("‚ùå Le fichier t√©l√©charg√© n'est pas un fichier VRO valide")
                        try:
                            os.remove(temp_path)
                        except:
                            pass
                        return False
                # Renommer le fichier temporaire
                try:
                    if os.path.exists(output_path):
                        os.remove(output_path)
                    os.rename(temp_path, output_path)
                except Exception as e:
                    st.error(f"‚ùå Erreur lors du d√©placement du fichier : {str(e)}")
                    # Essayer de copier le fichier √† la place
                    import shutil
                    try:
                        shutil.copy2(temp_path, output_path)
                        os.remove(temp_path)
                    except Exception as e2:
                        st.error(f"‚ùå √âchec de la copie du fichier : {str(e2)}")
                        return False
                st.success(f"‚úÖ T√©l√©chargement r√©ussi - Taille : {file_size/1024/1024:.1f} MB")
                return True
            else:
                st.error("‚ùå √âchec de l'√©criture du fichier")
                return False
        except Exception as e:
            st.error(f"‚ùå Erreur pendant le t√©l√©chargement : {str(e)}")
            try:
                if os.path.exists(temp_path):
                    os.remove(temp_path)
            except:
                pass
            return False
    except Exception as e:
        st.error(f"‚ùå Erreur inattendue : {str(e)}")
        try:
            if os.path.exists(output_path):
                os.remove(output_path)
        except:
            pass
        return False


def record_audio_simple():
    st.subheader("üé§ Enregistrement vocal")
    wav_audio_data = st_audiorec()

    if wav_audio_data:
        st.success("‚úÖ Enregistrement termin√© !")
        
        # Utiliser tempfile pour cr√©er un fichier temporaire pour l'audio enregistr√©
        try:
            st.info("Cr√©ation du fichier temporaire...")
            # Utilisez NamedTemporaryFile avec delete=False pour que le fichier persiste apr√®s la fermeture
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio_file:
                temp_audio_path = temp_audio_file.name
                st.info(f"Fichier temporaire cr√©√© : {temp_audio_path}")
                
                st.info("√âcriture des donn√©es audio dans le fichier temporaire...")
                temp_audio_file.write(wav_audio_data)
                st.info("√âcriture termin√©e.")
            
            # Stocker le chemin du fichier temporaire dans la session
            st.session_state.audio_file_path = temp_audio_path
            st.session_state.audio_transcript = ""  # Reset transcript
            st.write(f"üìÇ Chemin local du fichier temporaire : `{temp_audio_path}`")

            # Afficher les options de lecture et t√©l√©chargement √† partir du fichier temporaire
            # Il faut rouvrir le fichier pour le lire car il a √©t√© ferm√© par le 'with' statement
            st.audio(open(temp_audio_path, "rb").read(), format='audio/wav')
            st.download_button("üíæ T√©l√©charger l'audio", open(temp_audio_path, "rb").read(), file_name="enregistrement.wav")

        except Exception as e:
            st.error(f"‚ùå Erreur lors de la cr√©ation/√©criture du fichier audio temporaire : {str(e)}")
            st.session_state.audio_file_path = None # S'assurer que l'√©tat est propre
            st.session_state.audio_transcript = ""

def upload_audio_file():
    st.subheader("üéß Uploader un fichier audio")
    uploaded_file = st.file_uploader(
        "Choisir un fichier audio",
        type=["mp3", "wav", "ogg", "flac", "aac", "m4a"],
        help="Formats accept√©s : MP3, WAV, OGG, FLAC, AAC, M4A",
        key="audio_uploader"
    )

    if uploaded_file is not None:
        st.success("‚úÖ Fichier audio upload√© !")
        
        # Utiliser tempfile pour cr√©er un fichier temporaire pour l'audio upload√©
        try:
            st.info("Cr√©ation du fichier temporaire...")
            # Utiliser le suffixe bas√© sur l'extension du fichier upload√©
            suffix = os.path.splitext(uploaded_file.name)[1]
            with tempfile.NamedTemporaryFile(suffix=suffix, delete=False) as temp_audio_file:
                temp_audio_path = temp_audio_file.name
                st.info(f"Fichier temporaire cr√©√© : {temp_audio_path}")

                st.info("√âcriture des donn√©es audio dans le fichier temporaire...")
                # uploaded_file.getvalue() contient les bytes du fichier upload√©
                temp_audio_file.write(uploaded_file.getvalue())
                st.info("√âcriture termin√©e.")
            
            # Stocker le chemin du fichier temporaire dans la session
            st.session_state.audio_file_path = temp_audio_path
            st.session_state.audio_transcript = ""  # Reset transcript
            st.write(f"üìÇ Chemin local du fichier temporaire : `{temp_audio_path}`")

            # Afficher les options de lecture et t√©l√©chargement √† partir du fichier temporaire
            st.audio(open(temp_audio_path, "rb").read(), format=uploaded_file.type) # Use uploaded file type
            st.download_button("üíæ T√©l√©charger l'audio", open(temp_audio_path, "rb").read(), file_name=uploaded_file.name)

        except Exception as e:
            st.error(f"‚ùå Erreur lors de la cr√©ation/√©criture du fichier audio temporaire : {str(e)}")
            st.session_state.audio_file_path = None # S'assurer que l'√©tat est propre
            st.session_state.audio_transcript = ""

def parse_pv_text(pv_text, meeting_info):
    """
    Parse le texte du PV g√©n√©r√© par Gemini pour extraire :
    - Les participants (Monsieur/Madame + nom)
    - Les points d'ordre du jour (titre + contenu)
    Retourne un dictionnaire structur√© pour create_word_pv.
    """
    pv_struct = {
        'presents': [],
        'absents': [],
        'assistent': [],
        'ordre_du_jour': []
    }
    # Participants : on prend ceux de meeting_info (plus fiable)
    for name, title in meeting_info.get('participants', []):
        civilite = 'Monsieur' if 'M.' in title or 'Monsieur' in title else 'Madame' if 'Mme' in title or 'Madame' in title else 'Monsieur'
        pv_struct['presents'].append((civilite, name))
    # TODO : g√©rer absents et assistent si tu ajoutes ces champs dans l'UI

    # Points d'ordre du jour
    # On cherche les titres de points (ex: 1. TITRE)
    point_pattern = re.compile(r'\n?(\d+)\.\s*(.+?)(?=\n\d+\.|\Z)', re.DOTALL)
    matches = list(point_pattern.finditer(pv_text))
    for i, match in enumerate(matches):
        titre = match.group(2).strip().split('\n')[0]
        # Le contenu est tout ce qui suit le titre jusqu'au prochain point
        start = match.end()
        end = matches[i+1].start() if i+1 < len(matches) else len(pv_text)
        contenu = pv_text[start:end].strip()
        pv_struct['ordre_du_jour'].append({'titre': titre, 'contenu': contenu})
    return pv_struct

def main():
    st.set_page_config(
        page_title="Assistant de R√©union CMR",
        page_icon="üìä",
        layout="wide"
    )

    # Configuration de l'API Gemini
    configure_apis()
    
    # Ajout du titre avec logo
    col1, col2, col3 = st.columns([2, 2, 8])
    with col2:
        st.image("logo.png", width=200)
    with col3:
        st.markdown(
            "<h1 style='text-align: left; margin-top: 25px;'>G√©n√©ration du PV de R√©union</h1>",
            unsafe_allow_html=True
    )
    
    # Variables de session pour stocker les r√©sultats
    if 'video_transcript' not in st.session_state:
        st.session_state.video_transcript = ""
    if 'handwritten_text' not in st.session_state:
        st.session_state.handwritten_text = ""
    if 'pdf_summary' not in st.session_state:
        st.session_state.pdf_summary = ""
    if 'pdf_data' not in st.session_state:
        st.session_state.pdf_data = {}
    if 'audio_transcript' not in st.session_state:
        st.session_state.audio_transcript = ""
    if 'meeting_info' not in st.session_state:
        st.session_state.meeting_info = None
    if 'additional_participants' not in st.session_state:
        st.session_state.additional_participants = []

    # Section d'informations de base du PV
    st.header("üìù Informations de base du PV")
    
    col1, col2 = st.columns(2)
    
    with col1:
        pv_number = st.text_input("Num√©ro du PV", "02/24")
        date = st.date_input("Date", format="DD/MM/YYYY")
        lieu = st.text_input("Lieu", " ")
        heure_debut = st.time_input("Heure d√©but")
        heure_fin = st.time_input("Heure fin")
    
    with col2:
        st.subheader("Participants")
        participants = []
        
        # Option pour ajouter des participants suppl√©mentaires
        if st.button("Ajouter un participant"):
            st.session_state.additional_participants.append(len(st.session_state.additional_participants))
        
        # Afficher les champs pour les participants suppl√©mentaires
        for i in st.session_state.additional_participants:
            st.write("**Participant suppl√©mentaire**")
            col1, col2, col3 = st.columns(3)
            with col1:
                name = st.text_input(f"Nom {i+1}")
            with col2:
                title = st.text_input(f"Titre {i+1}")
            if name and title:
                participants.append((name, title))

                

    # Stocker les informations de la r√©union
    st.session_state.meeting_info = {
        'pv_number': pv_number,
        'date': date.strftime("%d/%m/%Y"),
        'lieu': lieu,
        'heure_debut': heure_debut.strftime("%H:%M"),
        'heure_fin': heure_fin.strftime("%H:%M"),
        'participants': [(name, title) for name, title in participants if name and title],
        'participants_by_section': {
            "PR√âSENTS OU REPR√âSENT√âS": [f"{name} - {title}" for name, title in participants if name and title],
            "ABSENTS EXCUS√âS": [],
            "ASSISTENT √âGALEMENT": []
        }
    }

    # Section d'upload des fichiers
    st.markdown("### üìÅ Importation des documents")

    audio_input_mode = st.radio(
        "Source audio :",
        ("Enregistrer l'audio", "Uploader un fichier audio"),
        horizontal=True,
        key="audio_input_mode"
    )

    if audio_input_mode == "Enregistrer l'audio":
        record_audio_simple()
    elif audio_input_mode == "Uploader un fichier audio":
        upload_audio_file()


    # Style CSS pour contr√¥ler individuellement chaque drag and drop
    st.markdown("""
        <style>
        /* Styles de base pour tous les uploaders */
        .stFileUploader > div {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        /* Style sp√©cifique pour l'uploader vid√©o */
        [data-testid="stFileUploader"]:has(#video_uploader) {
            height: 150px;
            margin-top: 0.5rem;
            margin-bottom: 1rem;
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        /* Style sp√©cifique pour l'uploader d'images */
        [data-testid="stFileUploader"]:has(#image_uploader) {
            height: 180px;
            margin-top: 0.5rem;
            margin-bottom: 1rem;
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        /* Style sp√©cifique pour l'uploader PDF */
        [data-testid="stFileUploader"]:has(#pdf_uploader) {
            height: 160px;
            margin-top: 0.75rem;
            margin-bottom: 1rem;
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        /* Style pour le conteneur des colonnes */
        .row-widget.stHorizontalBlock {
            align-items: flex-start;
            gap: 1.5rem;
        }
        
        /* Style pour les titres des sections */
        .element-container h3 {
            margin-bottom: 0.75rem;
        }
        </style>
    """, unsafe_allow_html=True)
    


    # Cr√©er d'abord les titres dans une rang√©e
    title_cols = st.columns(4)
    with title_cols[0]:
        st.markdown("### üé• Vid√©o de la r√©union")
    with title_cols[1]:
        st.markdown("### üìù Images manuscrites")
    with title_cols[2]:
        st.markdown("### üìÑ Documents PDF")
    
    # Ensuite, cr√©er les options radio pour la vid√©o dans une rang√©e s√©par√©e
    radio_col, empty_col1, empty_col2 = st.columns(3)
    with radio_col:
        video_upload_mode = st.radio(
            "Mode d'importation :",("Uploader un fichier", "Fournir un lien"),
            horizontal=True,
            key="video_mode"
        )

    # Ensuite, cr√©er les textes d'instructions dans une rang√©e s√©par√©e
    text_cols = st.columns(3)
    with text_cols[0]:
        if video_upload_mode == "Uploader un fichier":
            st.markdown("Importez votre vid√©o")
    with text_cols[1]:
        st.markdown("Importez vos images")
    with text_cols[2]:
        st.markdown("Importez vos documents")

    # Initialiser video_file et video_url √† None pour √©viter UnboundLocalError
    video_file = None
    video_url = None

    # Enfin, cr√©er les zones de t√©l√©chargement dans une rang√©e s√©par√©e
    upload_cols = st.columns(3)
    with upload_cols[0]:
        if video_upload_mode == "Uploader un fichier":
            video_file = st.file_uploader(
                "Importer une vid√©o",
                type=["mp4", "vro", "mpeg4"],
                help="Formats accept√©s : MP4, VRO, MPEG4 ‚Ä¢ Limite : 2GB",
                key="video_uploader",
                label_visibility="collapsed"
            )
        else:
            video_url = st.text_input(
                "Lien de la vid√©o",
                placeholder="https://drive.google.com/file/d/...",
                help="Lien Google Drive partag√©"
            )
    with upload_cols[1]:
        image_files = st.file_uploader(
            "Importer des images",
            type=["jpg", "jpeg", "png"],
            accept_multiple_files=True,
            help="Formats accept√©s : JPG, JPEG, PNG ‚Ä¢ Limite : 2GB par fichier",
            key="image_uploader",
            label_visibility="collapsed"
        )
    with upload_cols[2]:
        pdf_files = st.file_uploader(
            "Importer des PDF",
            type=["pdf"],
            accept_multiple_files=True,
            help="Format accept√© : PDF ‚Ä¢ Limite : 2GB par fichier",
            key="pdf_uploader",
            label_visibility="collapsed"
        )
    

    # Bouton de d√©marrage centr√© avec espace au-dessus
    st.markdown("<div style='text-align: center; margin-top: 2em;'>", unsafe_allow_html=True)
    if st.button("üöÄ D√©marrer le traitement", use_container_width=True):
        if not st.session_state.meeting_info:
            st.error("‚ùå Veuillez remplir les informations de base du PV avant de commencer le traitement.")
            return
        # Cr√©er des conteneurs pour les r√©sultats
        video_container = st.container()
        images_container = st.container()
        pdfs_container = st.container()
        audio_container = st.container()
        pv_container = st.container()

        # Afficher spinner global
        global_status = st.info("‚è≥ Traitement en cours, veuillez patienter...")

        # Traitement de l'audio (transcription batch au moment du traitement)
        if hasattr(st.session_state, 'audio_file_path') and st.session_state.audio_file_path:
            audio_file_to_process = st.session_state.audio_file_path
            try:
                with audio_container:
                    st.subheader("üé§ Traitement de l'audio")
                    # Lire le fichier local pour l'affichage
                    st.audio(open(audio_file_to_process, "rb").read(), format='audio/wav')
                    status = st.info("Transcription de l'audio en cours...")
                    progress_bar = st.progress(0)

                    # Le traitement FFmpeg et segmentation se fera depuis le fichier WAV local
                    # Pas besoin de TemporaryDirectory ici, on utilise directement le fichier local
                    segments = segment_audio(audio_file_to_process) # segment_audio prend le chemin en param√®tre

                    transcript = []
                    total = len(segments)
                    for i, segment_path in enumerate(segments):
                        # process_segment_batch prend des chemins de segments temporaires cr√©√©s par segment_audio
                        # Note: segment_audio cr√©e d√©j√† des fichiers temporaires, process_segment_batch les lit et les supprime.
                        # La logique ici reste similaire, on passe les chemins des segments.
                        batch_result = process_segment_batch([segment_path], 0, 1, 1, progress_bar, status)
                        transcript.extend(batch_result)
                        # progress_bar et status sont mis √† jour dans process_segment_batch maintenant

                    st.session_state.audio_transcript = "\n".join(transcript)
                    status.success("‚úÖ Transcription audio termin√©e!")
                    st.text_area("Transcription de l'audio:", st.session_state.audio_transcript, height=200)

            except Exception as e:
                st.error(f"‚ùå Erreur lors du traitement de l'audio : {str(e)}")
                # S'assurer que l'√©tat de la transcription est vide en cas d'erreur
                st.session_state.audio_transcript = ""
            finally:
                # Nettoyer le fichier WAV local apr√®s traitement (r√©ussi ou non)
                if os.path.exists(audio_file_to_process):
                    try:
                        os.remove(audio_file_to_process)
                        st.info(f"Fichier audio local supprim√© : {audio_file_to_process}")
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Impossible de supprimer le fichier audio local {audio_file_to_process}: {str(e)}")
                # R√©initialiser le chemin dans la session
                st.session_state.audio_file_path = None

        # Traitement de la vid√©o
        with video_container:
            st.subheader("üé• Traitement de la vid√©o")
            if (video_file is not None) or (video_url is not None and video_url.strip() != ""):
          # V√©rifier si on a soit un fichier soit une URL valide
                with st.spinner("Transcription en cours..."):
                    if video_file:
                        st.session_state.video_transcript = transcribe_video(video_file)
                    elif video_url and video_url.strip():
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video:
                            temp_video_path = temp_video.name
                            if download_video_from_drive(video_url, temp_video_path):
                                if verify_video_file(temp_video_path):
                                    st.session_state.video_transcript = transcribe_video(open(temp_video_path, "rb"))
                                else:
                                    st.error("‚ùå Le fichier vid√©o t√©l√©charg√© n'est pas valide")
                            else:
                                st.error("‚ùå √âchec du t√©l√©chargement de la vid√©o")

                    if st.session_state.video_transcript:
                        st.success("‚úÖ Transcription termin√©e!")
                        st.text_area("Transcription:", st.session_state.video_transcript, height=200)
            else:
                st.info("‚ÑπÔ∏è Aucune vid√©o n'a √©t√© fournie")

        # Traitement des images
        if image_files:
            with images_container:
                st.subheader("üñºÔ∏è Traitement des images")
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                transcriptions = {}
                for idx, image_file in enumerate(image_files):
                    try:
                        status_text.text(f"Analyse de l'image {idx + 1}/{len(image_files)}: {image_file.name}")
                        image_bytes = image_file.read()
                        image = Image.open(io.BytesIO(image_bytes))
                        
                        col1, col2 = st.columns([1, 1])
                        with col1:
                            st.image(image, caption=f"Image {idx + 1}: {image_file.name}", use_column_width=True)
                        with col2:
                            transcription = process_handwritten_image(image_bytes)
                            if transcription:
                                st.text_area(f"Texte reconnu - Image {idx + 1}", transcription, height=150)
                                transcriptions[image_file.name] = transcription
                        
                        progress_bar.progress((idx + 1)/len(image_files))
                    except Exception as e:
                        st.error(f"‚ùå Erreur lors du traitement de l'image {image_file.name}: {str(e)}")
                
                if transcriptions:
                    st.session_state.handwritten_text = "\n\n".join([f"[Image: {name}]\n{text}" for name, text in transcriptions.items()])
                    st.success("‚úÖ Traitement des images termin√©!")

        # Traitement des PDFs
        if pdf_files:
            with pdfs_container:
                st.subheader("üìÑ Traitement des PDFs")
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # R√©initialiser les donn√©es PDF de la session
                st.session_state.pdf_data = {}
                pdf_summaries_list = [] # Liste temporaire pour l'ancien format
                
                for idx, pdf_file in enumerate(pdf_files):
                    try:
                        status_text.text(f"Analyse du document {idx + 1}/{len(pdf_files)}: {pdf_file.name}")
                        # Lire √† nouveau car le pointeur peut √™tre √† la fin apr√®s l'upload
                        pdf_file.seek(0) 
                        pdf_result = process_pdf(pdf_file)
                        
                        if pdf_result["summary"]:
                            # Stocker le r√©sultat structur√©
                            st.session_state.pdf_data[pdf_file.name] = pdf_result
                            # Ajouter au r√©sum√© global pour generate_meeting_minutes
                            pdf_summaries_list.append(f"[Document: {pdf_file.name}]\n{pdf_result['summary']}")
                            
                            # Afficher l'aper√ßu
                            with st.expander(f"üìÑ Document {idx + 1}: {pdf_file.name} (Analys√©)"):
                                st.text_area("Aper√ßu du contenu extrait:", pdf_result["summary"], height=200)
                                if pdf_result["acronyms"]:
                                    st.write("**Acronymes d√©tect√©s:**")
                                    st.json(pdf_result["acronyms"])
                                else:
                                    st.write("Aucun acronyme d√©tect√©.")
                        else:
                             st.warning(f"Aucun contenu extrait pour {pdf_file.name}")
                        
                        progress_bar.progress((idx + 1)/len(pdf_files))
                    except Exception as e:
                        st.error(f"‚ùå Erreur lors de l'analyse du PDF {pdf_file.name}: {str(e)}")
                        # Stocker une indication d'erreur
                        st.session_state.pdf_data[pdf_file.name] = {"summary": f"[Erreur: {str(e)}]", "acronyms": {}} 
                        pdf_summaries_list.append(f"[Document: {pdf_file.name}]\n[Erreur lors de l'analyse: {str(e)}]")
                
                # Mettre √† jour l'ancien √©tat pdf_summary pour generate_meeting_minutes
                st.session_state.pdf_summary = "\n\n".join(pdf_summaries_list)
                if st.session_state.pdf_data:
                    st.success("‚úÖ Traitement des PDFs termin√©!")
                else:
                    st.warning("Aucun PDF n'a pu √™tre trait√©.")

        # G√©n√©ration du PV (uniquement apr√®s la fin de la transcription)
        with pv_container:
            st.subheader("G√©n√©ration du PV")
            pdf_summary_for_generation = "\n\n".join(
                [f"[Document: {name}]\n{data.get('summary', '')}" 
                 for name, data in st.session_state.get('pdf_data', {}).items()]
            )
            if any([st.session_state.video_transcript, st.session_state.handwritten_text, pdf_summary_for_generation, st.session_state.get("audio_transcript", "")]):
                with st.spinner("G√©n√©ration du PV en cours..."):
                    pv = generate_meeting_minutes(
                        st.session_state.video_transcript,
                        st.session_state.handwritten_text,
                        pdf_summary_for_generation,
                        st.session_state.meeting_info,
                        st.session_state.get("audio_transcript", "")
                    )
                    if pv:
                        st.success("‚úÖ PV g√©n√©r√© avec succ√®s!")
                        st.text_area("Proc√®s-verbal de la r√©union:", pv, height=500)
                        try:
                            # Cr√©er le document Word directement √† partir du texte g√©n√©r√©
                            doc_buffer = create_word_pv(pv, st.session_state.meeting_info)
                            st.download_button(
                                label="üìé T√©l√©charger le PV en format Word",
                                data=doc_buffer,
                                file_name=f"PV_{st.session_state.meeting_info.get('pv_number', 'NA').replace('/', '_')}_Comite_Audit.docx",
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                            )
                        except Exception as e_word:
                            st.error(f"‚ùå Erreur lors de la cr√©ation du document Word: {str(e_word)}")
                global_status.success("‚úÖ Traitement termin√© !")
            else:
                global_status.warning("‚ö†Ô∏è Aucun contenu √† traiter pour g√©n√©rer le PV")

if __name__ == "__main__":
    main() 
